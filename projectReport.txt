
# Project Report: Rail-Forecast

This document provides a comprehensive analysis of the Rail-Forecast project, covering both the backend and frontend components.

## 1. Backend Analysis

The backend is a Python-based application using the Flask framework. It serves as the brain of the operation, running a train network simulation, predicting delays using a machine learning model, and providing data to the frontend via a REST API.

### 1.1. Core Capabilities

*   **Train Network Simulation:** The backend simulates a train network based on schedules loaded from a Supabase database. It can track the real-time status, location, and delays of multiple trains.
*   **AI-Powered Delay Prediction:** The system uses an ensemble machine learning model (`EnhancedDelayPredictor`) to predict the extent of a potential delay. This is the core "intelligent" feature.
*   **Impact Analysis:** It can calculate the cascading impact of a single train's delay on the rest of the network.
*   **Recommendation Generation:** Based on the predicted impact and a "risk level," the backend generates actionable recommendations (e.g., "Reroute a low-priority freight train").
*   **Scenario Injection:** The backend allows for injecting pre-defined scenarios like "single breakdown" or "weather disruption" to test the system's response.

### 1.2. Data and Models

*   **Data:** The system uses synthetic data generated by `data_generator.py`. This data, stored in a Supabase database, includes:
    *   **Schedules:** Train schedules with station names and times.
    *   **Delays:** Historical delay records with causes and weather conditions.
*   **Machine Learning Model:**
    *   The model is an `EnhancedDelayPredictor` (from `improved_model.py`) which is an ensemble of three different models: XGBoost (`xgb`), Random Forest (`rf`), and Linear Regression (`lr`).
    *   It's trained using `train_enhanced_model.py`, which fetches data from Supabase.
    *   The trained model is saved as `enhanced_delay_model.pkl`.
    *   **Features Used:** The model uses features like `hour_of_day`, `is_peak_hour`, `day_of_week`, `initial_delay`, `weather_severity`, and `network_congestion`.

### 1.3. Tunable Factors & API Endpoints

The simulation and predictions can be influenced by:

*   **Initial Delay:** The starting delay of a train.
*   **Weather Severity:** A numerical representation of weather conditions.
*   **Congestion:** The ratio of delayed trains in the network.
*   **Scenarios:** Injecting different scenarios resets the simulation and introduces specific delay events.

**Key API Endpoints:**

*   `GET /simulation_state`: Provides the live status of all trains.
*   `GET /kpis`: Returns key performance indicators like on-time percentage and average delay.
*   `POST /predict_delay`: Predicts delay for a specific train given a scenario.
*   `POST /analyze_impact`: Analyzes the ripple effect of a predicted delay.
*   `POST /get_recommendations`: Suggests actions based on the impact analysis.
*   `POST /inject_scenario`: Starts a pre-defined simulation scenario.
*   `POST /reset_simulation`: Resets the simulation to its initial state.

---

## 2. Frontend Analysis

The frontend is a Next.js (React) application built with TypeScript. It uses Tailwind CSS for styling and Shadcn/UI for some of its components. It acts as the user's window into the train network simulation, providing dashboards and controls.

### 2.1. Current Features

*   **Dashboard (`/dashboard`):** This is the main page. It displays:
    *   Key Performance Indicators (KPIs) like 'On-Time Percentage' and 'Average Delay'.
    *   A live table of all active trains, their status, location, and current delay.
    *   The data on this page auto-refreshes every 10 seconds.
*   **Scenario Control (`/scenarios`):** A control panel that allows the user to inject different simulation scenarios ('Single Breakdown', 'Weather Disruption') or reset the simulation.
*   **Navigation:** A clean layout with a header for primary navigation (`Dashboard`, `Predictions`, etc.) and a sidebar for secondary actions (`Scenarios`, `Analytics`).
*   **Theming:** Includes a dark/light mode toggle.

### 2.2. What's Missing & Frontend Appearance

The frontend is functional but feels incomplete and visually basic.

*   **Why it Looks "Bad" (or rather, "Undeveloped"):**
    1.  **Component Mismatch:** The project uses components from two different locations (`app/components/UI` and `components/ui`), which is confusing. The styling seems inconsistent.
    2.  **No Visualizations:** The dashboard presents all data in tables and KPI cards. There are no charts, graphs, or maps, which makes it hard to grasp the network's status at a glance.
    3.  **Unimplemented Pages:** The navigation links to `Predictions`, `Impact`, `Recommendations`, `Analytics`, and `Monitor`, but the files for these pages are either missing or not provided, meaning a significant portion of the application is not built.
    4.  **Lack of Interactivity:** Beyond the scenario buttons, there is very little a user can do. They can't click on a train to get more details, view historical data, or interact with the predictions.

*   **What's Missing (Functionality):**
    1.  **Maps:** As you correctly identified, there are no maps. A geographical representation of the train network is a critical missing feature for a tool like this.
    2.  **Prediction & Analysis UI:** The core AI/ML features of the backend (prediction, impact analysis, recommendations) have no corresponding user interface on the frontend.
    3.  **Data Visualization:** There are no charts (e.g., for historical delay trends) or visual indicators of network health beyond the KPI numbers.
    4.  **Detailed Views:** No way to see details for a specific train (its full schedule, delay history, etc.).

### 2.3. Improvements Possible in Under 1 Hour

Given the time constraint, the focus should be on high-impact visual and functional additions using the existing infrastructure.

1.  **Implement the Prediction UI (Highest Priority):**
    *   Create the `/predictions` page.
    *   Add a simple form where a user can select a train from a dropdown (fetched from the `/simulation_state` endpoint) and a scenario (e.g., "Weather Disruption").
    *   On submission, call the `/predict_delay` backend endpoint.
    *   Display the results (`predicted_delay_minutes`, `confidence_score`, `explanation`, `risk_level`) in a clear, easy-to-read format. This single feature would connect the frontend to the core AI capabilities of the backend.

2.  **Add Basic Charts to the Dashboard:**
    *   Use a simple charting library like `recharts` (which is easy to add to a React project).
    *   On the `/dashboard` page, add a bar chart showing the delay minutes for the top 5 most delayed trains.
    *   Add a line chart to the `/analytics` page to plot a mock "Average Delay Over Time" to make the page functional.

3.  **Consolidate and Polish UI Components:**
    *   Move all reusable UI components into the `components/ui` directory to resolve the structural confusion.
    *   Ensure consistent styling on buttons and cards. The current `Scenarios` page has different button styling from the rest of the app.
    *   Add loading spinners and disabled states more consistently across all interactive elements to improve user feedback.

By focusing on these three areas, you could significantly improve the frontend's functionality and visual appeal in a short amount of time, making the project feel much more complete and impressive.
