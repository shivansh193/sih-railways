
# Styling Documentation

This document outlines the styling setup for the frontend application.

## Configuration Files

### `tailwind.config.ts`

```typescript
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config
```

### `postcss.config.js`

```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

### `app/globals.css`

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

## Explanation

Your project is set up with a comprehensive styling system utilizing Tailwind CSS, PostCSS, and global CSS variables.

### Tailwind CSS

- **`tailwind.config.ts`**: This is the main configuration file for Tailwind CSS.
  - **`darkMode: ["class"]`**: Dark mode is enabled and will be activated when a parent element has the `dark` class.
  - **`content`**: This array tells Tailwind which files to scan for class names. It's correctly configured to scan your `app`, `components`, `pages`, and `src` directories for `.ts` and `.tsx` files.
  - **`theme`**: This section customizes Tailwind's default theme.
    - **`container`**: You've configured a centered container with `2rem` of padding.
    - **`extend`**: You've added custom animations (`accordion-down`, `accordion-up`).
  - **`plugins`**: You're using the `tailwindcss-animate` plugin to add animation utilities.

### PostCSS

- **`postcss.config.js`**: This file configures PostCSS.
  - **`tailwindcss: {}`**: This plugin processes your Tailwind CSS, including the `@tailwind` directives and converting utility classes into CSS.
  - **`autoprefixer: {}`**: This plugin adds vendor prefixes to your CSS for better browser compatibility.

### Global Styles

- **`app/globals.css`**: This file contains your global styles and Tailwind directives.
  - **`@tailwind base;`**, **`@tailwind components;`**, **`@tailwind utilities;`**: These directives are essential for Tailwind to work. They inject Tailwind's base styles, component classes, and utility classes into your CSS.
  - **`@layer base`**: You're using CSS layers to define custom styles.
    - **CSS Variables**: You've defined a comprehensive set of CSS variables for your color palette, border radius, and other theme-related values. This is a great practice for theming and consistency. You have separate variables for light mode (`:root`) and dark mode (`.dark`).
    - **Base Styles**: You've set a global border color and the default background and text colors for the `body`.

### Component-Level Styling

- You have two `components` directories: `app/components/` and `components/`. It seems like `app/components/` is the primary one for your Next.js 13+ app structure.
- Inside `app/components/UI/` and `components/ui/`, you have UI components like `Button`, `Card`, etc. These components are likely using Tailwind CSS classes for styling. For example, a button component might have classes like `bg-primary text-primary-foreground px-4 py-2 rounded-md`.

## Potential Issues and How to Debug

Given this setup, here are some common styling issues and how to approach them:

- **Classes not applying**:
  - **Check `tailwind.config.ts` `content` paths**: Ensure that the file you're working in is included in the `content` array. If you add a new directory, you might need to add it here.
  - **Restart the development server**: After changing `tailwind.config.ts`, you need to restart your Next.js development server for the changes to take effect.
  - **Typo in class name**: Double-check for typos in your Tailwind classes.
- **Dark mode not working**:
  - Make sure you have a mechanism to add the `dark` class to the `<html>` or `<body>` element. You have a `theme-provider.tsx` and `theme-toggle.tsx`, which are likely handling this.
- **CSS variable issues**:
  - **Incorrect variable name**: Check for typos in your CSS variable names (e.g., `var(--backgroun)` instead of `var(--background)`).
  - **Scope**: Ensure the CSS variables are available where you're trying to use them. The way you've defined them in `:root` and `.dark` should make them globally available.
- **Specificity issues**:
  - If a style is not applying, it might be overridden by a more specific selector. Use your browser's developer tools to inspect the element and see which styles are being applied.
  - The `@layer` directive in your `globals.css` helps with this, but you might still encounter issues with third-party libraries or custom CSS.

This documentation should give you a clear overview of your styling setup. If you have a specific styling problem, feel free to ask, and I can help you debug it based on this information.
